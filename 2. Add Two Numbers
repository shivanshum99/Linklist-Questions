Solution1:
class Solution {
public:
    ListNode* reverse(ListNode* head){
        ListNode* prev = NULL;
        ListNode* curr = head;
        ListNode* forward = NULL;

        while(curr!=NULL){
            forward = curr->next;
            curr->next = prev;
            prev = curr;
            curr = forward;
        }
        return prev;
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        //reverse both the linklist
        ListNode* head1 = reverse(l1);
        ListNode* head2 = reverse(l2);

        //Add both Linklist
        ListNode* ansHead = NULL;
        ListNode* ansTail = NULL;
        int carry;

        while(head1!=NULL && head2!=NULL){
            int sum = carry + head1->val + head2->val;
            int digit = sum%10;
            carry = sum/10;

            //create node for digit
            ListNode* newNode = new ListNode(digit);
            //attach new node in ans linklist
            if(ansHead == NULL){
                ansHead = newNode;
                ansTail = newNode;
            }
            else{
                ansTail->next = newNode;
                ansTail = newNode;
            }
            head1 = head1->next;
            head2 = head2->next;
        } 
        //jab head1 list ki length head2 se jyada h 
        while(head1!=NULL){
            int sum = carry + head1->val;
            int digit = sum%10;
            carry = sum/10;

            ListNode* newNode = new ListNode(digit);
            ansTail->next = newNode;
            ansTail = newNode;
            head1 = head1->next;
        }
        //jab head2 list ki length head1 se jyada h
        while(head2!=NULL){
            int sum = carry + head2->val;
            int digit = sum%10;
            carry = sum/10;

            ListNode* newNode = new ListNode(digit);
            ansTail->next = newNode;
            ansTail = newNode;
            head2 = head2->next;
        }

        //handle carry ko alag se
        while(carry != 0){
            int sum = carry;
            int digit = sum%10;
            carry = sum/10;
            ListNode* newNode = new ListNode(digit);
            ansTail->next = newNode;
            ansTail = newNode;
        }

        //ansHead = reverse(ansHead);
        return ansHead;
    }
};
