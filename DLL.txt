// Online C++ compiler to run C++ program online
#include <bits/stdc++.h>
using namespace std;
class node{
    public:
        int data;
        node* next;
        node* prev;
        
        node(int data)
        {
            this->data = data;
            this->next = NULL;
            this->prev = NULL;
        }
        ~node()
        {
            int value = this->data;
            //memory free
            if(this->next!=NULL)
            {
                delete next;
                this->next = NULL;
                this->prev = NULL;
            }
            cout<<"memory is free for node with data: "<< value<<endl;
        }
};
class dll{
    node* head;
    public:
        void create()
        {
            int n;
            cout<<"enter the no. of node"<<endl;
            cin>>n;
            if(n==0)
            {
                head = NULL;
                return;
            }
            int x;
            cout<<"enter the data of first node"<<endl;
            cin>>x;
            head = new node(x);
            node* p = head;
            for(int i = 1; i<n; i++)
            {
                cout<<"enter the data of next node"<<endl;
                cin>>x;
                node* q= new node(x);
                p->next = q;
                q->prev = p;
                p = p->next;
            }
            
        }
        void insertAtHead(int data)
        {
            
            if(head == NULL)
            {
                node*temp = new node(data);
                head = temp;
            }
            else
            {
                node*temp = new node(data);
                temp->next = head;
                head->prev= temp;
                head = temp;
            }
            
        }
        void insertAtTail(int data)
        {
            if(head == NULL)
            {
                node*temp = new node(data);
                head = temp;
            }
            else{
                node* temp = new node(data);
                node* p = head;
                while(p->next!=NULL)
                {
                    p = p->next;
                }
                p->next = temp;
                temp->prev = p;
            }
        }
        void insertAtPosition(int data, int position)
        {
            //insert at start
            if(position == 1)
            {
                insertAtHead(data);
                return;
            }
            
            node*temp = head;
            int cnt = 1;
            while(cnt<position-1)
            {
                temp = temp->next;
                cnt++;
            }
            //inserting at Last Position
            if(temp->next->next==NULL)
            {
                insertAtTail(data);
                return;
            }
            node* p = new node(data);
        
            p->next = temp->next;
            temp->next->prev = temp;
            temp->next = p;
            p->prev = temp;
        }
        void deleteByPosition(int position)
        {
            //deleting first node
            if(position == 1)
            {
                node *temp = head;
                head = head->next;
                temp->next->prev = NULL;
                temp->next = NULL;
                delete temp;
            }
            //deleting other node
            else{
                node* curr = head;
                node* pre = NULL;
                int cnt = 1;
                while(cnt<position)
                {
                    pre = curr;
                    curr = curr->next;
                    cnt++;
                }
                curr->prev = NULL;
                pre->next = curr->next;
                curr->next->prev = pre;
                curr->next = NULL;
                delete curr;
        }
    }
        void print(){
            node* temp = head;
            while(temp!=NULL)
            {
                cout<<temp->data<<" ";
                temp = temp->next;
            }
            cout<<endl;
        }
};

int main() {
    // Write C++ code here
    dll obj;
    obj.create();
    obj.insertAtHead(12);
    obj.print();
    obj.insertAtTail(13);
    obj.print();
    obj.insertAtPosition(22,2);
    obj.print();
    obj.insertAtPosition(100,1);
    obj.print();
    obj.insertAtPosition(101,4);
    obj.print();
    obj.deleteByPosition(2);
    obj.print();
    //obj.insertAtPosition(102,9);
    //obj.print();

    return 0;
}