Approch 1

private:
    bool checkPalindrome(vector<int> arr)
    {
        int s = 0;int e = arr.size() - 1;
        
        while(s<=e)
        {
            if(arr[s]!=arr[e])
            {
                return false;
            }
            s++;
            e--;
        }
        return true;
    }
public:
    bool isPalindrome(ListNode* head) {
        vector<int> arr;
        ListNode* temp = head;
        while(temp!=NULL)
        {
            arr.push_back(temp->val);
            temp=temp->next;
        }
        
        return checkPalindrome(arr);
    }


Approach 2

private:
    ListNode* getMid(ListNode* head)
    {
        ListNode* slow = head;
        ListNode* fast = head->next;
        
        while(fast!=NULL && fast->next!=NULL)
        {
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
    ListNode* reverse(ListNode* head)
    {
        ListNode* curr = head;
        ListNode* prev = NULL;
        ListNode* next = NULL;
        
        while(curr!=NULL)
        {
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
public:
    bool isPalindrome(ListNode* head) {
       if(head->next == NULL)
       {
           return true;
       }
       //Step1->get the middle node
        ListNode* mid = getMid(head);
        
        //Step2->reverse the half linklist after getting mid
        ListNode* temp = mid->next;
        mid->next = reverse(temp);
        
        //Step3->compare both halves
        ListNode* head1 = head;
        ListNode* head2 = mid->next;
        
        while(head2 != NULL)
        {
            if(head1->val != head2->val)
            {
                return false;
            }
            head1 = head1->next;
            head2 = head2->next;
        }
        
        //Step4-> repeat step2
         temp = mid->next;
         mid->next = reverse(temp);
        
        return true;
    }
